// src/pages/Profile.jsx (ƒê√£ s·ª≠a logic l∆∞u v√† g·ª≠i ·∫£nh)

import React, { useEffect, useState, useMemo, useRef } from 'react';
import './Profile.css';
// import { updateProfileAPI, uploadAvatarAPI } from '../api'; // Gi·∫£ ƒë·ªãnh h√†m API

const Profile = () => {
    const fileInputRef = useRef(null);
    
    // TH√äM STATE M·ªöI ƒê·ªÇ L∆ØU TR·ªÆ FILE TH√î (File Object)
    const [avatarFile, setAvatarFile] = useState(null);

    const [userData, setUserData] = useState({
        fullName: 'L√™ ƒê·ª©c To√†n',
        studentId: 'B22DCCN730',
        github: 'https://github.com/ToanVY/IoT.git',
        figma: 'https://www.figma.com/design/R03h45Jnuu58OsxUIhrxlv/IoT?node-id=0-1',
        email: 'letoan5204@gmail.com',
        avatarUrl: '/assets/profile-avatar.png'
    });

    const [isEditing, setIsEditing] = useState(false);

    // --- LOGIC X·ª¨ L√ù L∆ØU (SAVE) ---
    const handleEditToggle = async () => {
        // N·∫øu ƒëang ·ªü ch·∫ø ƒë·ªô ch·ªânh s·ª≠a (v√† s·∫Øp chuy·ªÉn sang ch·∫ø ƒë·ªô xem)
        if (isEditing) {
            try {
                // 1. CHU·∫®N B·ªä D·ªÆ LI·ªÜU G·ª¨I ƒêI
                const formData = new FormData();
                
                // Th√™m d·ªØ li·ªáu ·∫£nh (Ch·ªâ g·ª≠i n·∫øu c√≥ file m·ªõi)
                if (avatarFile) {
                    formData.append('avatar', avatarFile);
                }

                // Th√™m c√°c tr∆∞·ªùng d·ªØ li·ªáu text (N·∫øu API c·ªßa b·∫°n d√πng FormData)
                formData.append('fullName', userData.fullName);
                formData.append('studentId', userData.studentId);
                // ... (th√™m c√°c tr∆∞·ªùng kh√°c)
                
                console.log('ƒêang g·ª≠i d·ªØ li·ªáu l√™n server...');
                
                // 2. G·ªåI API L∆ØU D·ªÆ LI·ªÜU
                // Gi·∫£ ƒë·ªãnh h√†m n√†y g·ªçi API backend (c·∫ßn ƒë∆∞·ª£c tri·ªÉn khai)
                // const result = await updateProfileAPI(formData); 
                
                // Sau khi l∆∞u th√†nh c√¥ng, c·∫≠p nh·∫≠t URL ·∫£nh n·∫øu backend tr·∫£ v·ªÅ URL m·ªõi
                // V√≠ d·ª•: setUserData(prev => ({...prev, avatarUrl: result.newAvatarUrl}));

                // Reset file th√¥ sau khi g·ª≠i
                setAvatarFile(null); 

                alert('C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!');

            } catch (error) {
                console.error("L·ªói khi l∆∞u d·ªØ li·ªáu:", error);
                alert('L·ªói khi c·∫≠p nh·∫≠t h·ªì s∆°. Vui l√≤ng th·ª≠ l·∫°i.');
                // Gi·ªØ nguy√™n isEditing n·∫øu l∆∞u th·∫•t b·∫°i
                return; 
            }
        }
        
        // Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i ch·ªânh s·ª≠a
        setIsEditing(!isEditing);
    };

    const handleChange = (e) => {
        const { name, value } = e.target;
        setUserData(prevData => ({
            ...prevData,
            [name]: value
        }));
    };
    
    // --- H√ÄM X·ª¨ L√ù CH·ªåN ·∫¢NH M·ªöI ---
    const handleAvatarChange = (e) => {
        const file = e.target.files[0];
        if (file && file.type.startsWith('image/')) {
            // L∆ØU TR·ªÆ FILE TH√î ƒê·ªÇ G·ª¨I L√äN SERVER SAU
            setAvatarFile(file); 
            
            const reader = new FileReader();
            reader.onloadend = () => {
                // Ch·ªâ c·∫≠p nh·∫≠t URL ƒë·ªÉ xem tr∆∞·ªõc (client-side preview)
                setUserData(prevData => ({
                    ...prevData,
                    avatarUrl: reader.result 
                }));
            };
            reader.readAsDataURL(file);
        }
    };
    
    // H√†m k√≠ch ho·∫°t input file khi nh·∫•n n√∫t "Thay ƒë·ªïi"
    const triggerFileInput = () => {
        fileInputRef.current.click();
    };

    return (
        <div className="profile-page">
            
            <div className="profile-card">
                
                <div className="profile-header">
                    <div className="avatar-section">
                        <div className="avatar-placeholder">
                            <img src={userData.avatarUrl} alt="·∫¢nh ƒë·∫°i di·ªán" className="profile-avatar"/>
                            
                            {/* INPUT FILE ·∫®N */}
                            <input
                                type="file"
                                ref={fileInputRef}
                                onChange={handleAvatarChange}
                                accept="image/*"
                                style={{ display: 'none' }}
                            />
                        </div>
                        
                        <button className="btn-secondary" onClick={triggerFileInput}>Thay ƒë·ªïi</button>
                    </div>

                    <div className="info-intro">
                        <h3>{userData.fullName}</h3>
                        <p>{userData.studentId}</p>
                    </div>

                    <button 
                        className="btn-primary" 
                        onClick={handleEditToggle}
                    >
                        {isEditing ? 'L∆∞u' : 'S·ª≠a'}
                    </button>
                </div>

                {/* Ph·∫ßn Form chi ti·∫øt (Gi·ªØ nguy√™n) */}
                <div className="profile-details">
                    
                    {/* H·ªå V√Ä T√äN */}
                    <div className="detail-row">
                        <label>H·ªç v√† t√™n</label>
                        <input
                            type="text"
                            name="fullName"
                            value={userData.fullName}
                            onChange={handleChange}
                            readOnly={!isEditing}
                            className={isEditing ? 'editable' : ''}
                        />
                    </div>

                    {/* M√É SV */}
                    <div className="detail-row">
                        <label>M√£ SV</label>
                        <input
                            type="text"
                            name="studentId"
                            value={userData.studentId}
                            onChange={handleChange}
                            readOnly={!isEditing}
                            className={isEditing ? 'editable' : ''}
                        />
                    </div>

                    {/* GITHUB */}
                    <div className="detail-row">
                        <label>Github</label>
                        <input
                            type="text"
                            name="github"
                            value={userData.github}
                            onChange={handleChange}
                            readOnly={!isEditing}
                            className={isEditing ? 'editable' : ''}
                        />
                    </div>
                    
                    {/* FIGMA */}
                    <div className="detail-row">
                        <label>Figma</label>
                        <input
                            type="text"
                            name="figma"
                            value={userData.figma}
                            onChange={handleChange}
                            readOnly={!isEditing}
                            className={isEditing ? 'editable' : ''}
                        />
                    </div>
                    
                    {/* EMAIL */}
                    <div className="detail-row">
                        <label>Email</label>
                        <input
                            type="email"
                            name="email"
                            value={userData.email}
                            onChange={handleChange}
                            readOnly={!isEditing}
                            className={isEditing ? 'editable' : ''}
                        />
                        <span className="email-icon">üìß</span>
                    </div>

                </div>
            </div>
        </div>
    );
};

export default Profile;