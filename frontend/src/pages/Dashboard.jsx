// frontend/src/pages/Dashboard.jsx

import React, { useEffect, useState, useRef } from 'react';
import { io } from 'socket.io-client';
import { getSensorData, controlDeviceAPI } from '../api'; 
import SensorChart from '../components/SensorChart';
import SensorCard from '../components/SensorCard';
import DeviceCard from '../components/DeviceCard';
import './Dashboard.css'; 

const Dashboard = () => {
    const [latestData, setLatestData] = useState({ 
        temperature: '--', 
        humidity: '--', 
        light: '--' 
    });
    const [chartData, setChartData] = useState([]); 
    
    const [deviceStatus, setDeviceStatus] = useState({
        light: 'off',
        fan: 'off',
        ac: 'off'
    });

    const [pendingDevice, setPendingDevice] = useState(null); 
    const timeoutRef = useRef(null); // ‚úÖ l∆∞u timeout hi·ªán t·∫°i

    const socket = io('http://localhost:5000'); 

    useEffect(() => {
        const fetchInitialData = async () => {
            try {
                const data = await getSensorData(30); 
                setChartData(data.reverse()); 
                if (data.length > 0) {
                    setLatestData(data[data.length - 1]);
                }
            } catch (error) {
                console.error("L·ªói t·∫£i d·ªØ li·ªáu ban ƒë·∫ßu:", error);
            }
        };

        fetchInitialData();

        socket.on('sensorDataUpdate', (data) => {
            setLatestData(data);
            setChartData(prev => [...prev.slice(-29), data]);
        });

        // üîÑ Nh·∫≠n tr·∫°ng th√°i thi·∫øt b·ªã t·ª´ backend
        socket.on("deviceStates", (states) => {
            console.log("üîÑ Nh·∫≠n tr·∫°ng th√°i thi·∫øt b·ªã:", states);
            setDeviceStatus(states);
            setPendingDevice(null);

            // ‚úÖ n·∫øu c√≥ ph·∫£n h·ªìi th√¨ h·ªßy timeout
            if (timeoutRef.current) {
                clearTimeout(timeoutRef.current);
                timeoutRef.current = null;
            }
        });

        return () => {
            socket.off('sensorDataUpdate');
            socket.off('deviceStates');
            socket.disconnect();
            if (timeoutRef.current) clearTimeout(timeoutRef.current);
        };
    }, []);

    const handleDeviceControl = async (device, status) => {
        setPendingDevice(device);

        try {
            await controlDeviceAPI(device, status);
            console.log(`‚úÖ G·ª≠i l·ªánh ${status} cho ${device}, ƒëang ch·ªù ph·∫£n h·ªìi...`);

            // ‚è≥ B·∫Øt ƒë·∫ßu timeout 5s
            if (timeoutRef.current) clearTimeout(timeoutRef.current);
            timeoutRef.current = setTimeout(() => {
                alert(`‚ö†Ô∏è Thi·∫øt b·ªã "${device}" kh√¥ng ph·∫£n h·ªìi.`);
                setPendingDevice(null);
            }, 5000);

        } catch (error) {
            console.error(`‚ùå L·ªói g·ª≠i l·ªánh cho ${device}:`, error);
            alert(`Kh√¥ng th·ªÉ ƒëi·ªÅu khi·ªÉn ${device}.`);
            setPendingDevice(null);
        }
    };

    return (
        <div className="dashboard-page">
            {/* Sensor Cards */}
            <div className="sensor-summary-cards center">
                <SensorCard title="Nhi·ªát ƒë·ªô" value={latestData.temperature} unit="¬∞C" icon="üå°Ô∏è" theme="red" />
                <SensorCard title="ƒê·ªô ·∫©m" value={latestData.humidity} unit="%" icon="üíß" theme="blue" />
                <SensorCard title="√Ånh s√°ng" value={latestData.light} unit="Lux" icon="üí°" theme="yellow" />
            </div>
            
            {/* Chart */}
            <div className="chart-area card">
                <SensorChart sensorData={chartData} /> 
            </div>

            {/* Device Control */}
            <div className="device-control-area">
                <DeviceCard 
                    device="light" 
                    label="ƒê√®n Chi·∫øu S√°ng" 
                    status={deviceStatus.light} 
                    onToggle={handleDeviceControl}
                    loading={pendingDevice === 'light'} 
                />
                <DeviceCard 
                    device="fan" 
                    label="Qu·∫°t Th√¥ng Gi√≥" 
                    status={deviceStatus.fan} 
                    onToggle={handleDeviceControl}
                    loading={pendingDevice === 'fan'} 
                />
                <DeviceCard 
                    device="ac" 
                    label="ƒêi·ªÅu H√≤a" 
                    status={deviceStatus.ac} 
                    onToggle={handleDeviceControl}
                    loading={pendingDevice === 'ac'} 
                />
            </div>
        </div>
    );
};

export default Dashboard;
