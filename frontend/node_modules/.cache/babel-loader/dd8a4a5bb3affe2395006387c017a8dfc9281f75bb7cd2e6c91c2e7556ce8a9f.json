{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\IoT\\\\IoT-WebApp\\\\frontend\\\\src\\\\pages\\\\DataSensor.jsx\",\n  _s = $RefreshSig$();\n// src/pages/DataSensor.jsx\n\nimport React, { useEffect, useState, useMemo } from 'react';\nimport { getSensorData } from '../api';\nimport Table from '../components/Table';\n// import './DataSensor.css'; // Dùng CSS nếu cần\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataSensor = () => {\n  _s();\n  const [rawSensorData, setRawSensorData] = useState([]); // Dữ liệu gốc\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [sortBy, setSortBy] = useState('created_at'); // Sắp xếp mặc định theo thời gian\n  const [sortOrder, setSortOrder] = useState('desc'); // Sắp xếp mặc định giảm dần\n\n  // Tiêu đề cột (Phải khớp với keys trong dữ liệu API)\n  const sensorHeaders = ['id', 'temperature', 'humidity', 'light', 'created_at'];\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Giả định getSensorData trả về mảng dữ liệu\n        const data = await getSensorData(500);\n        setRawSensorData(data);\n      } catch (error) {\n        console.error(\"Lỗi tải dữ liệu cảm biến:\", error);\n        setRawSensorData([]); // Luôn gán mảng rỗng nếu có lỗi\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // === LOGIC TÌM KIẾM VÀ SẮP XẾP (Chỉ tính toán khi data, search, sort thay đổi) ===\n  const filteredAndSortedData = useMemo(() => {\n    let currentData = Array.isArray(rawSensorData) ? [...rawSensorData] : []; // Sử dụng bản sao để tránh thay đổi state gốc\n\n    // 1. Lọc (Filter)\n    if (searchTerm) {\n      const lowerCaseSearch = searchTerm.toLowerCase();\n      currentData = currentData.filter(item =>\n      // Kiểm tra xem bất kỳ giá trị nào trong đối tượng có chứa searchTerm không\n      Object.values(item).some(value => {\n        // Xử lý giá trị có thể là null hoặc undefined\n        return String(value !== null && value !== void 0 ? value : '').toLowerCase().includes(lowerCaseSearch);\n      }));\n    }\n\n    // 2. Sắp xếp (Sort)\n    if (sortBy) {\n      currentData.sort((a, b) => {\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n\n        // Logic sắp xếp cơ bản (phù hợp cho cả chuỗi và số)\n        if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1;\n        if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1;\n        return 0;\n      });\n    }\n    return currentData;\n  }, [rawSensorData, searchTerm, sortBy, sortOrder]);\n  // ======================================\n\n  // Xử lý khi người dùng click vào header cột để sắp xếp\n  const handleSortChange = newSortBy => {\n    if (sortBy === newSortBy) {\n      // Đảo ngược thứ tự nếu nhấp vào cột đang sắp xếp\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      // Thiết lập cột mới, mặc định là giảm dần (desc)\n      setSortBy(newSortBy);\n      setSortOrder('desc');\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-center\",\n    children: \"\\u0110ang t\\u1EA3i d\\u1EEF li\\u1EC7u l\\u1ECBch s\\u1EED...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-controls-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"T\\xECm ki\\u1EBFm...\",\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value),\n        className: \"search-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"search-button\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      headers: sensorHeaders,\n      data: filteredAndSortedData // Truyền dữ liệu đã được lọc/sắp xếp\n      ,\n      title: \"B\\u1EA3ng D\\u1EEF li\\u1EC7u C\\u1EA3m bi\\u1EBFn\",\n      onSortChange: handleSortChange // Truyền hàm xử lý sắp xếp vào Table\n      ,\n      sortBy: sortBy,\n      sortOrder: sortOrder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(DataSensor, \"bC4IJDdc2fGXJalV1LW1cclfgzQ=\");\n_c = DataSensor;\nexport default DataSensor;\nvar _c;\n$RefreshReg$(_c, \"DataSensor\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","getSensorData","Table","jsxDEV","_jsxDEV","DataSensor","_s","rawSensorData","setRawSensorData","loading","setLoading","searchTerm","setSearchTerm","sortBy","setSortBy","sortOrder","setSortOrder","sensorHeaders","fetchData","data","error","console","filteredAndSortedData","currentData","Array","isArray","lowerCaseSearch","toLowerCase","filter","item","Object","values","some","value","String","includes","sort","a","b","aValue","bValue","handleSortChange","newSortBy","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","headers","title","onSortChange","_c","$RefreshReg$"],"sources":["D:/xampp/htdocs/IoT/IoT-WebApp/frontend/src/pages/DataSensor.jsx"],"sourcesContent":["// src/pages/DataSensor.jsx\r\n\r\nimport React, { useEffect, useState, useMemo } from 'react';\r\nimport { getSensorData } from '../api';\r\nimport Table from '../components/Table'; \r\n// import './DataSensor.css'; // Dùng CSS nếu cần\r\n\r\nconst DataSensor = () => {\r\n    const [rawSensorData, setRawSensorData] = useState([]); // Dữ liệu gốc\r\n    const [loading, setLoading] = useState(true);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [sortBy, setSortBy] = useState('created_at'); // Sắp xếp mặc định theo thời gian\r\n    const [sortOrder, setSortOrder] = useState('desc'); // Sắp xếp mặc định giảm dần\r\n\r\n    // Tiêu đề cột (Phải khớp với keys trong dữ liệu API)\r\n    const sensorHeaders = ['id', 'temperature', 'humidity', 'light', 'created_at'];\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                // Giả định getSensorData trả về mảng dữ liệu\r\n                const data = await getSensorData(500); \r\n                setRawSensorData(data);\r\n            } catch (error) {\r\n                console.error(\"Lỗi tải dữ liệu cảm biến:\", error);\r\n                setRawSensorData([]); // Luôn gán mảng rỗng nếu có lỗi\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    // === LOGIC TÌM KIẾM VÀ SẮP XẾP (Chỉ tính toán khi data, search, sort thay đổi) ===\r\n    const filteredAndSortedData = useMemo(() => {\r\n        let currentData = Array.isArray(rawSensorData) ? [...rawSensorData] : []; // Sử dụng bản sao để tránh thay đổi state gốc\r\n\r\n        // 1. Lọc (Filter)\r\n        if (searchTerm) {\r\n            const lowerCaseSearch = searchTerm.toLowerCase();\r\n            currentData = currentData.filter(item => \r\n                // Kiểm tra xem bất kỳ giá trị nào trong đối tượng có chứa searchTerm không\r\n                Object.values(item).some(value => {\r\n                    // Xử lý giá trị có thể là null hoặc undefined\r\n                    return String(value ?? '').toLowerCase().includes(lowerCaseSearch);\r\n                })\r\n            );\r\n        }\r\n\r\n        // 2. Sắp xếp (Sort)\r\n        if (sortBy) {\r\n            currentData.sort((a, b) => {\r\n                const aValue = a[sortBy];\r\n                const bValue = b[sortBy];\r\n                \r\n                // Logic sắp xếp cơ bản (phù hợp cho cả chuỗi và số)\r\n                if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1;\r\n                if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1;\r\n                return 0;\r\n            });\r\n        }\r\n\r\n        return currentData;\r\n    }, [rawSensorData, searchTerm, sortBy, sortOrder]);\r\n    // ======================================\r\n    \r\n    // Xử lý khi người dùng click vào header cột để sắp xếp\r\n    const handleSortChange = (newSortBy) => {\r\n        if (sortBy === newSortBy) {\r\n            // Đảo ngược thứ tự nếu nhấp vào cột đang sắp xếp\r\n            setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\r\n        } else {\r\n            // Thiết lập cột mới, mặc định là giảm dần (desc)\r\n            setSortBy(newSortBy);\r\n            setSortOrder('desc'); \r\n        }\r\n    };\r\n\r\n    if (loading) return <div className=\"loading-center\">Đang tải dữ liệu lịch sử...</div>;\r\n\r\n    return (\r\n        <div className=\"page-container\">\r\n            {/* Header và Controls (Theo thiết kế) */}\r\n            <div className=\"table-controls-bar\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Tìm kiếm...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                    className=\"search-input\"\r\n                />\r\n                <button className=\"search-button\">Search</button>\r\n            </div>\r\n\r\n            {/* Bảng Dữ liệu */}\r\n            <Table \r\n                headers={sensorHeaders} \r\n                data={filteredAndSortedData} // Truyền dữ liệu đã được lọc/sắp xếp\r\n                title=\"Bảng Dữ liệu Cảm biến\"\r\n                onSortChange={handleSortChange} // Truyền hàm xử lý sắp xếp vào Table\r\n                sortBy={sortBy}\r\n                sortOrder={sortOrder}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DataSensor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}