{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\IoT\\\\IoT-WebApp\\\\frontend\\\\src\\\\pages\\\\DataSensor.jsx\",\n  _s = $RefreshSig$();\n// src/pages/DataSensor.jsx\n\nimport React, { useEffect, useState, useMemo } from 'react';\nimport { getSensorData } from '../api';\nimport Table from '../components/Table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataSensor = () => {\n  _s();\n  const [rawSensorData, setRawSensorData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // THÊM STATE MỚI: Loại tìm kiếm (type)\n  // Mặc định tìm kiếm trên tất cả các cột\n  const [searchType, setSearchType] = useState('all');\n  const [sortBy, setSortBy] = useState('created_at');\n  const [sortOrder, setSortOrder] = useState('desc');\n\n  // Tiêu đề cột và tùy chọn tìm kiếm\n  const sensorHeaders = ['id', 'temperature', 'humidity', 'light', 'created_at'];\n\n  // Các tùy chọn cho dropdown Type\n  const searchOptions = [{\n    value: 'all',\n    label: 'Tất cả'\n  }, {\n    value: 'created_at',\n    label: 'Ngày/Thời gian'\n  }, {\n    value: 'temperature',\n    label: 'Nhiệt độ'\n  }, {\n    value: 'humidity',\n    label: 'Độ ẩm'\n  }, {\n    value: 'light',\n    label: 'Ánh sáng'\n  }];\n  useEffect(() => {\n    // ... (Logic tải dữ liệu gốc vẫn giữ nguyên)\n    const fetchData = async () => {\n      try {\n        const data = await getSensorData(500);\n        setRawSensorData(data);\n      } catch (error) {\n        console.error(\"Lỗi tải dữ liệu cảm biến:\", error);\n        setRawSensorData([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // === LOGIC TÌM KIẾM VÀ SẮP XẾP ĐÃ CẬP NHẬT ===\n  const filteredAndSortedData = useMemo(() => {\n    let currentData = Array.isArray(rawSensorData) ? [...rawSensorData] : [];\n\n    // 1. Lọc (Filter)\n    if (searchTerm) {\n      const lowerCaseSearch = searchTerm.toLowerCase();\n      currentData = currentData.filter(item => {\n        if (searchType === 'all') {\n          // Tìm kiếm trên TẤT CẢ các trường\n          return Object.values(item).some(value => {\n            return String(value !== null && value !== void 0 ? value : '').toLowerCase().includes(lowerCaseSearch);\n          });\n        } else {\n          // Tìm kiếm CHỈ TRONG cột được chọn\n          const value = item[searchType];\n          return String(value !== null && value !== void 0 ? value : '').toLowerCase().includes(lowerCaseSearch);\n        }\n      });\n    }\n\n    // 2. Sắp xếp (Sort) (Giữ nguyên logic cũ)\n    if (sortBy) {\n      currentData.sort((a, b) => {\n        const aValue = a[sortBy];\n        const bValue = b[sortBy];\n        if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1;\n        if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1;\n        return 0;\n      });\n    }\n    return currentData;\n  }, [rawSensorData, searchTerm, searchType, sortBy, sortOrder]); // Thêm searchType vào dependencies\n  // ======================================\n\n  const handleSortChange = newSortBy => {\n    if (sortBy === newSortBy) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortBy(newSortBy);\n      setSortOrder('desc');\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-center\",\n    children: \"\\u0110ang t\\u1EA3i d\\u1EEF li\\u1EC7u l\\u1ECBch s\\u1EED...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-controls-bar\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: searchType,\n        onChange: e => setSearchType(e.target.value),\n        className: \"search-type-select\",\n        children: searchOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: option.value,\n          children: option.label\n        }, option.value, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: `Tìm kiếm trong ${searchOptions.find(o => o.value === searchType).label}...`,\n        value: searchTerm,\n        onChange: e => setSearchTerm(e.target.value),\n        className: \"search-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"search-button\",\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      headers: sensorHeaders,\n      data: filteredAndSortedData,\n      title: \"B\\u1EA3ng D\\u1EEF li\\u1EC7u C\\u1EA3m bi\\u1EBFn\",\n      onSortChange: handleSortChange,\n      sortBy: sortBy,\n      sortOrder: sortOrder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n_s(DataSensor, \"UCoxX6rQl39Jp4b40fv37YYm3+o=\");\n_c = DataSensor;\nexport default DataSensor;\nvar _c;\n$RefreshReg$(_c, \"DataSensor\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","getSensorData","Table","jsxDEV","_jsxDEV","DataSensor","_s","rawSensorData","setRawSensorData","loading","setLoading","searchTerm","setSearchTerm","searchType","setSearchType","sortBy","setSortBy","sortOrder","setSortOrder","sensorHeaders","searchOptions","value","label","fetchData","data","error","console","filteredAndSortedData","currentData","Array","isArray","lowerCaseSearch","toLowerCase","filter","item","Object","values","some","String","includes","sort","a","b","aValue","bValue","handleSortChange","newSortBy","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","map","option","type","placeholder","find","o","headers","title","onSortChange","_c","$RefreshReg$"],"sources":["D:/xampp/htdocs/IoT/IoT-WebApp/frontend/src/pages/DataSensor.jsx"],"sourcesContent":["// src/pages/DataSensor.jsx\r\n\r\nimport React, { useEffect, useState, useMemo } from 'react';\r\nimport { getSensorData } from '../api';\r\nimport Table from '../components/Table'; \r\n\r\nconst DataSensor = () => {\r\n    const [rawSensorData, setRawSensorData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    \r\n    // THÊM STATE MỚI: Loại tìm kiếm (type)\r\n    // Mặc định tìm kiếm trên tất cả các cột\r\n    const [searchType, setSearchType] = useState('all'); \r\n    \r\n    const [sortBy, setSortBy] = useState('created_at'); \r\n    const [sortOrder, setSortOrder] = useState('desc'); \r\n\r\n    // Tiêu đề cột và tùy chọn tìm kiếm\r\n    const sensorHeaders = ['id', 'temperature', 'humidity', 'light', 'created_at'];\r\n\r\n    // Các tùy chọn cho dropdown Type\r\n    const searchOptions = [\r\n        { value: 'all', label: 'Tất cả' },\r\n        { value: 'created_at', label: 'Ngày/Thời gian' },\r\n        { value: 'temperature', label: 'Nhiệt độ' },\r\n        { value: 'humidity', label: 'Độ ẩm' },\r\n        { value: 'light', label: 'Ánh sáng' },\r\n    ];\r\n\r\n    useEffect(() => {\r\n        // ... (Logic tải dữ liệu gốc vẫn giữ nguyên)\r\n        const fetchData = async () => {\r\n            try {\r\n                const data = await getSensorData(500); \r\n                setRawSensorData(data);\r\n            } catch (error) {\r\n                console.error(\"Lỗi tải dữ liệu cảm biến:\", error);\r\n                setRawSensorData([]);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n        fetchData();\r\n    }, []);\r\n\r\n    // === LOGIC TÌM KIẾM VÀ SẮP XẾP ĐÃ CẬP NHẬT ===\r\n    const filteredAndSortedData = useMemo(() => {\r\n        let currentData = Array.isArray(rawSensorData) ? [...rawSensorData] : []; \r\n\r\n        // 1. Lọc (Filter)\r\n        if (searchTerm) {\r\n            const lowerCaseSearch = searchTerm.toLowerCase();\r\n            \r\n            currentData = currentData.filter(item => {\r\n                if (searchType === 'all') {\r\n                    // Tìm kiếm trên TẤT CẢ các trường\r\n                    return Object.values(item).some(value => {\r\n                        return String(value ?? '').toLowerCase().includes(lowerCaseSearch);\r\n                    });\r\n                } else {\r\n                    // Tìm kiếm CHỈ TRONG cột được chọn\r\n                    const value = item[searchType];\r\n                    return String(value ?? '').toLowerCase().includes(lowerCaseSearch);\r\n                }\r\n            });\r\n        }\r\n\r\n        // 2. Sắp xếp (Sort) (Giữ nguyên logic cũ)\r\n        if (sortBy) {\r\n            currentData.sort((a, b) => {\r\n                const aValue = a[sortBy];\r\n                const bValue = b[sortBy];\r\n                \r\n                if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1;\r\n                if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1;\r\n                return 0;\r\n            });\r\n        }\r\n\r\n        return currentData;\r\n    }, [rawSensorData, searchTerm, searchType, sortBy, sortOrder]); // Thêm searchType vào dependencies\r\n    // ======================================\r\n    \r\n    const handleSortChange = (newSortBy) => {\r\n        if (sortBy === newSortBy) {\r\n            setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\r\n        } else {\r\n            setSortBy(newSortBy);\r\n            setSortOrder('desc'); \r\n        }\r\n    };\r\n\r\n    if (loading) return <div className=\"loading-center\">Đang tải dữ liệu lịch sử...</div>;\r\n\r\n    return (\r\n        <div className=\"page-container\">\r\n            {/* Header và Controls (Theo thiết kế) */}\r\n            <div className=\"table-controls-bar\">\r\n                \r\n                {/* DROPDOWN CHỌN TYPE (LOẠI TÌM KIẾM) */}\r\n                <select \r\n                    value={searchType} \r\n                    onChange={(e) => setSearchType(e.target.value)} \r\n                    className=\"search-type-select\"\r\n                >\r\n                    {searchOptions.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.label}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n\r\n                {/* INPUT TÌM KIẾM */}\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder={`Tìm kiếm trong ${searchOptions.find(o => o.value === searchType).label}...`}\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                    className=\"search-input\"\r\n                />\r\n                \r\n                <button className=\"search-button\">Search</button>\r\n            </div>\r\n\r\n            {/* Bảng Dữ liệu */}\r\n            <Table \r\n                headers={sensorHeaders} \r\n                data={filteredAndSortedData} \r\n                title=\"Bảng Dữ liệu Cảm biến\"\r\n                onSortChange={handleSortChange} \r\n                sortBy={sortBy}\r\n                sortOrder={sortOrder}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DataSensor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}