{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\IoT\\\\IoT-WebApp\\\\frontend\\\\src\\\\pages\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\n// src/pages/Dashboard.jsx\n\nimport React, { useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport { getSensorData } from '../api'; // Giả định hàm này tải dữ liệu lịch sử\nimport SensorChart from '../components/SensorChart';\nimport SensorCard from '../components/SensorCard'; // Component hiển thị dữ liệu thẻ\nimport DeviceCard from '../components/DeviceCard'; // Component điều khiển thiết bị\nimport './Dashboard.css'; // File CSS cho dashboard\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  // State cho dữ liệu mới nhất (hiển thị trên SensorCard)\n  const [latestData, setLatestData] = useState({\n    temperature: '--',\n    humidity: '--',\n    light: '--'\n  });\n\n  // State cho dữ liệu thô của biểu đồ (lịch sử + thời gian thực)\n  const [chartData, setChartData] = useState([]);\n\n  // State cho trạng thái thiết bị (Đèn, Quạt, v.v.)\n  const [deviceStatus, setDeviceStatus] = useState({\n    light: 'off',\n    fan: 'off'\n  });\n\n  // Khởi tạo Socket.IO\n  // Đảm bảo IP và Port này khớp với Backend Server của bạn\n  const socket = io('http://localhost:5000');\n  useEffect(() => {\n    // Hàm tải dữ liệu lịch sử khi component load\n    const fetchInitialData = async () => {\n      try {\n        // Lấy 30 bản ghi dữ liệu gần nhất\n        const data = await getSensorData(30);\n        // Đảo ngược dữ liệu để hiển thị từ cũ nhất đến mới nhất\n        setChartData(data.reverse());\n        // Cập nhật dữ liệu mới nhất cho thẻ\n        if (data.length > 0) {\n          setLatestData(data[data.length - 1]);\n        }\n      } catch (error) {\n        console.error(\"Lỗi tải dữ liệu ban đầu:\", error);\n      }\n    };\n    fetchInitialData();\n\n    // === XỬ LÝ DỮ LIỆU REAL-TIME QUA SOCKET.IO ===\n    socket.on('sensorDataUpdate', data => {\n      // Cập nhật dữ liệu mới nhất cho các thẻ\n      setLatestData(data);\n\n      // Cập nhật biểu đồ: Thêm dữ liệu mới và giới hạn số lượng điểm (ví dụ: 30 điểm)\n      setChartData(prevChartData => {\n        const newData = [...prevChartData, data];\n        return newData.slice(-30); // Giữ lại 30 điểm cuối cùng\n      });\n    });\n\n    // Cleanup: Ngắt kết nối và dừng lắng nghe khi component unmount\n    return () => {\n      socket.off('sensorDataUpdate');\n      socket.disconnect();\n    };\n  }, []); // Chỉ chạy một lần khi component mount\n\n  // Xử lý điều khiển thiết bị (giả định dùng Socket.IO để gửi lệnh)\n  const handleDeviceControl = (device, status) => {\n    // 1. Cập nhật giao diện ngay lập tức\n    setDeviceStatus(prev => ({\n      ...prev,\n      [device]: status\n    }));\n\n    // 2. Gửi lệnh tới Backend qua Socket.IO\n    socket.emit('controlDevice', {\n      device,\n      status\n    });\n\n    // (Hoặc dùng API REST POST để gửi lệnh nếu Backend không dùng Socket.IO cho Control)\n    // controlDeviceAPI(device, status);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Dashboard Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensor-summary-cards\",\n      children: [/*#__PURE__*/_jsxDEV(SensorCard, {\n        title: \"Nhi\\u1EC7t \\u0111\\u1ED9\",\n        value: latestData.temperature,\n        unit: \"\\xB0C\",\n        icon: \"\\uD83C\\uDF21\\uFE0F\",\n        theme: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SensorCard, {\n        title: \"\\u0110\\u1ED9 \\u1EA9m\",\n        value: latestData.humidity,\n        unit: \"%\",\n        icon: \"\\uD83D\\uDCA7\",\n        theme: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SensorCard, {\n        title: \"\\xC1nh s\\xE1ng\",\n        value: latestData.light,\n        unit: \"Lux\",\n        icon: \"\\uD83D\\uDCA1\",\n        theme: \"yellow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-area card\",\n      children: /*#__PURE__*/_jsxDEV(SensorChart, {\n        sensorData: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"device-control-area\",\n      children: [/*#__PURE__*/_jsxDEV(DeviceCard, {\n        device: \"light\",\n        label: \"\\u0110\\xE8n Ph\\xF2ng Kh\\xE1ch\",\n        status: deviceStatus.light,\n        onToggle: handleDeviceControl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DeviceCard, {\n        device: \"fan\",\n        label: \"Qu\\u1EA1t Tr\\u1EA7n\",\n        status: deviceStatus.fan,\n        onToggle: handleDeviceControl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"sg667Zs0Tc1G213F2vSNXc3M7lo=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","io","getSensorData","SensorChart","SensorCard","DeviceCard","jsxDEV","_jsxDEV","Dashboard","_s","latestData","setLatestData","temperature","humidity","light","chartData","setChartData","deviceStatus","setDeviceStatus","fan","socket","fetchInitialData","data","reverse","length","error","console","on","prevChartData","newData","slice","off","disconnect","handleDeviceControl","device","status","prev","emit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","title","value","unit","icon","theme","sensorData","label","onToggle","_c","$RefreshReg$"],"sources":["D:/xampp/htdocs/IoT/IoT-WebApp/frontend/src/pages/Dashboard.jsx"],"sourcesContent":["// src/pages/Dashboard.jsx\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { io } from 'socket.io-client';\r\nimport { getSensorData } from '../api'; // Giả định hàm này tải dữ liệu lịch sử\r\nimport SensorChart from '../components/SensorChart';\r\nimport SensorCard from '../components/SensorCard'; // Component hiển thị dữ liệu thẻ\r\nimport DeviceCard from '../components/DeviceCard'; // Component điều khiển thiết bị\r\nimport './Dashboard.css'; // File CSS cho dashboard\r\n\r\nconst Dashboard = () => {\r\n    // State cho dữ liệu mới nhất (hiển thị trên SensorCard)\r\n    const [latestData, setLatestData] = useState({ \r\n        temperature: '--', \r\n        humidity: '--', \r\n        light: '--' \r\n    });\r\n    \r\n    // State cho dữ liệu thô của biểu đồ (lịch sử + thời gian thực)\r\n    const [chartData, setChartData] = useState([]); \r\n    \r\n    // State cho trạng thái thiết bị (Đèn, Quạt, v.v.)\r\n    const [deviceStatus, setDeviceStatus] = useState({\r\n        light: 'off',\r\n        fan: 'off'\r\n    });\r\n\r\n    // Khởi tạo Socket.IO\r\n    // Đảm bảo IP và Port này khớp với Backend Server của bạn\r\n    const socket = io('http://localhost:5000'); \r\n\r\n    useEffect(() => {\r\n        // Hàm tải dữ liệu lịch sử khi component load\r\n        const fetchInitialData = async () => {\r\n            try {\r\n                // Lấy 30 bản ghi dữ liệu gần nhất\r\n                const data = await getSensorData(30); \r\n                // Đảo ngược dữ liệu để hiển thị từ cũ nhất đến mới nhất\r\n                setChartData(data.reverse()); \r\n                // Cập nhật dữ liệu mới nhất cho thẻ\r\n                if (data.length > 0) {\r\n                    setLatestData(data[data.length - 1]);\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Lỗi tải dữ liệu ban đầu:\", error);\r\n            }\r\n        };\r\n\r\n        fetchInitialData();\r\n\r\n        // === XỬ LÝ DỮ LIỆU REAL-TIME QUA SOCKET.IO ===\r\n        socket.on('sensorDataUpdate', (data) => {\r\n            // Cập nhật dữ liệu mới nhất cho các thẻ\r\n            setLatestData(data);\r\n            \r\n            // Cập nhật biểu đồ: Thêm dữ liệu mới và giới hạn số lượng điểm (ví dụ: 30 điểm)\r\n            setChartData(prevChartData => {\r\n                const newData = [...prevChartData, data];\r\n                return newData.slice(-30); // Giữ lại 30 điểm cuối cùng\r\n            });\r\n        });\r\n\r\n        // Cleanup: Ngắt kết nối và dừng lắng nghe khi component unmount\r\n        return () => {\r\n            socket.off('sensorDataUpdate');\r\n            socket.disconnect();\r\n        };\r\n    }, []); // Chỉ chạy một lần khi component mount\r\n\r\n    // Xử lý điều khiển thiết bị (giả định dùng Socket.IO để gửi lệnh)\r\n    const handleDeviceControl = (device, status) => {\r\n        // 1. Cập nhật giao diện ngay lập tức\r\n        setDeviceStatus(prev => ({ ...prev, [device]: status }));\r\n        \r\n        // 2. Gửi lệnh tới Backend qua Socket.IO\r\n        socket.emit('controlDevice', { device, status });\r\n        \r\n        // (Hoặc dùng API REST POST để gửi lệnh nếu Backend không dùng Socket.IO cho Control)\r\n        // controlDeviceAPI(device, status);\r\n    };\r\n\r\n    return (\r\n        <div className=\"dashboard-page\">\r\n            <h2>Dashboard Home</h2>\r\n            \r\n            {/* KHU VỰC 1: THẺ HIỂN THỊ DỮ LIỆU CẢM BIẾN MỚI NHẤT */}\r\n            <div className=\"sensor-summary-cards\">\r\n                <SensorCard \r\n                    title=\"Nhiệt độ\" \r\n                    value={latestData.temperature} \r\n                    unit=\"°C\" \r\n                    icon=\"🌡️\" \r\n                    theme=\"red\" \r\n                />\r\n                <SensorCard \r\n                    title=\"Độ ẩm\" \r\n                    value={latestData.humidity} \r\n                    unit=\"%\" \r\n                    icon=\"💧\" \r\n                    theme=\"blue\"\r\n                />\r\n                <SensorCard \r\n                    title=\"Ánh sáng\" \r\n                    value={latestData.light} \r\n                    unit=\"Lux\" \r\n                    icon=\"💡\" \r\n                    theme=\"yellow\" \r\n                />\r\n            </div>\r\n            \r\n            {/* KHU VỰC 2: BIỂU ĐỒ THỜI GIAN THỰC (3 ĐƯỜNG) */}\r\n            <div className=\"chart-area card\">\r\n                {/* Truyền dữ liệu thô (mảng các đối tượng) vào SensorChart */}\r\n                <SensorChart sensorData={chartData} /> \r\n            </div>\r\n\r\n            {/* KHU VỰC 3: ĐIỀU KHIỂN THIẾT BỊ */}\r\n            <div className=\"device-control-area\">\r\n                <DeviceCard\r\n                    device=\"light\"\r\n                    label=\"Đèn Phòng Khách\"\r\n                    status={deviceStatus.light}\r\n                    onToggle={handleDeviceControl}\r\n                />\r\n                <DeviceCard\r\n                    device=\"fan\"\r\n                    label=\"Quạt Trần\"\r\n                    status={deviceStatus.fan}\r\n                    onToggle={handleDeviceControl}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}