{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\IoT\\\\IoT-WebApp\\\\frontend\\\\src\\\\pages\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\n// src/pages/Dashboard.jsx (Phiên bản đã cập nhật với Socket.IO)\n\nimport React, { useEffect, useState } from 'react';\nimport { io } from 'socket.io-client'; // <--- IMPORT MỚI\nimport { getSensorData } from '../api';\n// ... các import components khác\n\n// Khởi tạo kết nối Socket.IO Client\n// Địa chỉ này phải khớp với backend (http://localhost:5000)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\n\n// ... (các hằng số CONTROLLABLE_DEVICES)\n\nconst Dashboard = () => {\n  _s();\n  // Sử dụng state để lưu trữ dữ liệu thời gian thực và dữ liệu biểu đồ\n  const [latestData, setLatestData] = useState({});\n  const [chartData, setChartData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // Dùng useEffect để quản lý kết nối Socket.IO và tải dữ liệu lịch sử\n  useEffect(() => {\n    // 1. Tải dữ liệu lịch sử (API REST) cho biểu đồ một lần khi component mount\n    const fetchInitialData = async () => {\n      try {\n        const data = await getSensorData(30);\n        setChartData(data.reverse());\n        if (data.length > 0) {\n          setLatestData(data[data.length - 1]);\n        }\n      } catch (error) {\n        console.error(\"Lỗi tải dữ liệu Dashboard ban đầu:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // 2. Thiết lập lắng nghe Socket.IO (Real-time)\n    socket.on('connect', () => {\n      console.log('Socket.IO connected to server.');\n    });\n\n    // Lắng nghe sự kiện 'sensorDataUpdate' từ server.js\n    socket.on('sensorDataUpdate', data => {\n      console.log('Real-time data received:', data);\n\n      // Cập nhật dữ liệu mới nhất\n      setLatestData(data);\n\n      // Cập nhật biểu đồ: Xóa bản ghi cũ nhất và thêm bản ghi mới\n      setChartData(prevChartData => {\n        const updatedData = [...prevChartData.slice(1), data];\n        return updatedData;\n      });\n    });\n\n    // 3. Thực hiện tải dữ liệu ban đầu\n    fetchInitialData();\n\n    // 4. Dọn dẹp: Ngắt kết nối khi component unmount\n    return () => {\n      socket.off('connect');\n      socket.off('sensorDataUpdate');\n      // Không nên gọi socket.disconnect() ở đây nếu socket được tạo bên ngoài component\n    };\n  }, []); // Chỉ chạy một lần\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-center\",\n    children: \"\\u0110ang t\\u1EA3i Dashboard...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 25\n  }, this);\n\n  // ... (Phần return JSX y hệt phiên bản trước)\n  const temp = latestData.temperature || '--';\n  const light = latestData.light || '--';\n  const humidity = latestData.humidity || '--';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensor-summary-cards\",\n      children: [/*#__PURE__*/_jsxDEV(SensorCard, {\n        title: \"Nhi\\u1EC7t \\u0111\\u1ED9\",\n        value: temp,\n        unit: \"\\xB0C\",\n        icon: \"\\uD83C\\uDF21\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SensorCard, {\n        title: \"\\xC1nh s\\xE1ng\",\n        value: light,\n        unit: \"Lux\",\n        icon: \"\\uD83D\\uDCA1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SensorCard, {\n        title: \"\\u0110\\u1ED9 \\u1EA9m\",\n        value: humidity,\n        unit: \"%\",\n        icon: \"\\uD83D\\uDCA7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-chart-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-panel card\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"panel-title\",\n          children: \"Bi\\u1EC3u \\u0111\\u1ED3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-list\",\n          children: CONTROLLABLE_DEVICES.map(item => /*#__PURE__*/_jsxDEV(DeviceCard, {\n            device: item.device,\n            label: item.label,\n            mockupIcon: item.icon\n          }, item.device, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-panel card\",\n        children: /*#__PURE__*/_jsxDEV(SensorChart, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"XKwz9IucV5aTo1ZfgEeBlw8SRPM=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","io","getSensorData","jsxDEV","_jsxDEV","socket","Dashboard","_s","latestData","setLatestData","chartData","setChartData","loading","setLoading","fetchInitialData","data","reverse","length","error","console","on","log","prevChartData","updatedData","slice","off","className","children","fileName","_jsxFileName","lineNumber","columnNumber","temp","temperature","light","humidity","SensorCard","title","value","unit","icon","CONTROLLABLE_DEVICES","map","item","DeviceCard","device","label","mockupIcon","SensorChart","_c","$RefreshReg$"],"sources":["D:/xampp/htdocs/IoT/IoT-WebApp/frontend/src/pages/Dashboard.jsx"],"sourcesContent":["// src/pages/Dashboard.jsx (Phiên bản đã cập nhật với Socket.IO)\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { io } from 'socket.io-client'; // <--- IMPORT MỚI\r\nimport { getSensorData } from '../api';\r\n// ... các import components khác\r\n\r\n// Khởi tạo kết nối Socket.IO Client\r\n// Địa chỉ này phải khớp với backend (http://localhost:5000)\r\nconst socket = io('http://localhost:5000'); \r\n\r\n// ... (các hằng số CONTROLLABLE_DEVICES)\r\n\r\nconst Dashboard = () => {\r\n    // Sử dụng state để lưu trữ dữ liệu thời gian thực và dữ liệu biểu đồ\r\n    const [latestData, setLatestData] = useState({});\r\n    const [chartData, setChartData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    // Dùng useEffect để quản lý kết nối Socket.IO và tải dữ liệu lịch sử\r\n    useEffect(() => {\r\n        \r\n        // 1. Tải dữ liệu lịch sử (API REST) cho biểu đồ một lần khi component mount\r\n        const fetchInitialData = async () => {\r\n            try {\r\n                const data = await getSensorData(30); \r\n                setChartData(data.reverse()); \r\n                if (data.length > 0) {\r\n                    setLatestData(data[data.length - 1]); \r\n                }\r\n            } catch (error) {\r\n                console.error(\"Lỗi tải dữ liệu Dashboard ban đầu:\", error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        // 2. Thiết lập lắng nghe Socket.IO (Real-time)\r\n        socket.on('connect', () => {\r\n            console.log('Socket.IO connected to server.');\r\n        });\r\n        \r\n        // Lắng nghe sự kiện 'sensorDataUpdate' từ server.js\r\n        socket.on('sensorDataUpdate', (data) => {\r\n            console.log('Real-time data received:', data);\r\n            \r\n            // Cập nhật dữ liệu mới nhất\r\n            setLatestData(data);\r\n            \r\n            // Cập nhật biểu đồ: Xóa bản ghi cũ nhất và thêm bản ghi mới\r\n            setChartData(prevChartData => {\r\n                const updatedData = [...prevChartData.slice(1), data];\r\n                return updatedData;\r\n            });\r\n        });\r\n\r\n        // 3. Thực hiện tải dữ liệu ban đầu\r\n        fetchInitialData();\r\n\r\n        // 4. Dọn dẹp: Ngắt kết nối khi component unmount\r\n        return () => {\r\n            socket.off('connect');\r\n            socket.off('sensorDataUpdate');\r\n            // Không nên gọi socket.disconnect() ở đây nếu socket được tạo bên ngoài component\r\n        };\r\n    }, []); // Chỉ chạy một lần\r\n\r\n    if (loading) return <div className=\"loading-center\">Đang tải Dashboard...</div>;\r\n    \r\n    // ... (Phần return JSX y hệt phiên bản trước)\r\n    const temp = latestData.temperature || '--';\r\n    const light = latestData.light || '--';\r\n    const humidity = latestData.humidity || '--';\r\n\r\n    return (\r\n        <div className=\"dashboard-container\">\r\n            {/* Hàng 1: Thẻ Cảm biến */}\r\n            <div className=\"sensor-summary-cards\">\r\n                <SensorCard title=\"Nhiệt độ\" value={temp} unit=\"°C\" icon=\"🌡️\" />\r\n                <SensorCard title=\"Ánh sáng\" value={light} unit=\"Lux\" icon=\"💡\" />\r\n                <SensorCard title=\"Độ ẩm\" value={humidity} unit=\"%\" icon=\"💧\" />\r\n            </div>\r\n\r\n            {/* Hàng 2: Điều khiển và Biểu đồ */}\r\n            <div className=\"control-chart-area\">\r\n                \r\n                {/* Cột 1: Điều khiển */}\r\n                <div className=\"control-panel card\">\r\n                    <p className=\"panel-title\">Biểu đồ</p>\r\n                    <div className=\"control-list\">\r\n                        {CONTROLLABLE_DEVICES.map(item => (\r\n                            <DeviceCard \r\n                                key={item.device} \r\n                                device={item.device} \r\n                                label={item.label} \r\n                                mockupIcon={item.icon} \r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Cột 2: Biểu đồ */}\r\n                <div className=\"chart-panel card\">\r\n                    <SensorChart data={chartData} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}