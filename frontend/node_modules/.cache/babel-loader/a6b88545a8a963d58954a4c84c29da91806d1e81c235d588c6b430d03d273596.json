{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\IoT\\\\IoT-WebApp\\\\frontend\\\\src\\\\components\\\\SensorChart.jsx\",\n  _s = $RefreshSig$();\n// src/components/SensorChart.jsx\n\nimport React, { useMemo } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport annotationPlugin from 'chartjs-plugin-annotation';\n\n// Đăng ký các thành phần + plugin\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, annotationPlugin);\nconst SensorChart = ({\n  sensorData = []\n}) => {\n  _s();\n  // Tính toán dữ liệu chart\n  const {\n    chartData,\n    averages\n  } = useMemo(() => {\n    const dataArray = Array.isArray(sensorData) ? sensorData : [];\n\n    // Labels = thời gian\n    const labels = dataArray.map(item => {\n      const date = new Date(item.created_at);\n      return date.toLocaleTimeString('vi-VN', {\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      });\n    });\n\n    // Tách dữ liệu theo sensor\n    const temps = dataArray.map(item => item.temperature);\n    const hums = dataArray.map(item => item.humidity);\n    const lights = dataArray.map(item => item.light);\n\n    // Tính trung bình\n    const avg = arr => arr.length ? arr.reduce((a, b) => a + b, 0) / arr.length : 0;\n    const averages = {\n      temperature: avg(temps),\n      humidity: avg(hums),\n      light: avg(lights)\n    };\n    return {\n      chartData: {\n        labels,\n        datasets: [{\n          label: 'Nhiệt độ (°C)',\n          data: temps,\n          borderColor: 'rgb(255, 99, 132)',\n          backgroundColor: 'rgba(255, 99, 132, 0.5)',\n          yAxisID: 'yTemp',\n          tension: 0.3\n        }, {\n          label: 'Độ ẩm (%)',\n          data: hums,\n          borderColor: 'rgb(53, 162, 235)',\n          backgroundColor: 'rgba(53, 162, 235, 0.5)',\n          yAxisID: 'yHumidity',\n          tension: 0.3\n        }, {\n          label: 'Ánh sáng (Lux)',\n          data: lights,\n          borderColor: 'rgb(255, 206, 86)',\n          backgroundColor: 'rgba(255, 206, 86, 0.5)',\n          yAxisID: 'yLight',\n          tension: 0.3\n        }]\n      },\n      averages\n    };\n  }, [sensorData]);\n\n  // Cấu hình Chart\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    interaction: {\n      mode: 'index',\n      intersect: false\n    },\n    plugins: {\n      title: {\n        display: true,\n        text: 'Biểu đồ Cảm biến Thời gian thực'\n      },\n      legend: {\n        position: 'top'\n      },\n      annotation: {\n        annotations: {\n          avgTemp: {\n            type: 'line',\n            yMin: averages.temperature,\n            yMax: averages.temperature,\n            borderColor: 'rgb(255, 99, 132)',\n            borderWidth: 1,\n            borderDash: [6, 6],\n            label: {\n              enabled: true,\n              content: `TB: ${averages.temperature.toFixed(1)}°C`,\n              position: 'end'\n            }\n          },\n          avgHumidity: {\n            type: 'line',\n            yMin: averages.humidity,\n            yMax: averages.humidity,\n            borderColor: 'rgb(53, 162, 235)',\n            borderWidth: 1,\n            borderDash: [6, 6],\n            label: {\n              enabled: true,\n              content: `TB: ${averages.humidity.toFixed(1)}%`,\n              position: 'end'\n            }\n          },\n          avgLight: {\n            type: 'line',\n            yMin: averages.light,\n            yMax: averages.light,\n            borderColor: 'rgb(255, 206, 86)',\n            borderWidth: 1,\n            borderDash: [6, 6],\n            label: {\n              enabled: true,\n              content: `TB: ${averages.light.toFixed(1)} Lux`,\n              position: 'end'\n            }\n          }\n        }\n      }\n    },\n    scales: {\n      x: {\n        title: {\n          display: true,\n          text: 'Thời gian'\n        }\n      },\n      yTemp: {\n        type: 'linear',\n        display: true,\n        position: 'left',\n        title: {\n          display: true,\n          text: 'Nhiệt độ (°C)'\n        },\n        suggestedMin: 0,\n        suggestedMax: 50\n      },\n      yHumidity: {\n        type: 'linear',\n        display: true,\n        position: 'right',\n        grid: {\n          drawOnChartArea: false\n        },\n        title: {\n          display: true,\n          text: 'Độ ẩm (%)'\n        },\n        min: 0,\n        max: 100\n      },\n      yLight: {\n        type: 'linear',\n        display: false,\n        position: 'right',\n        grid: {\n          drawOnChartArea: false\n        },\n        suggestedMin: 0,\n        suggestedMax: 2000\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '400px',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 9\n  }, this);\n};\n_s(SensorChart, \"NdEqT0lvpZr89BzvJWtRc9Gx9YY=\");\n_c = SensorChart;\nexport default SensorChart;\nvar _c;\n$RefreshReg$(_c, \"SensorChart\");","map":{"version":3,"names":["React","useMemo","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","annotationPlugin","jsxDEV","_jsxDEV","register","SensorChart","sensorData","_s","chartData","averages","dataArray","Array","isArray","labels","map","item","date","Date","created_at","toLocaleTimeString","hour","minute","second","temps","temperature","hums","humidity","lights","light","avg","arr","length","reduce","a","b","datasets","label","data","borderColor","backgroundColor","yAxisID","tension","options","responsive","maintainAspectRatio","interaction","mode","intersect","plugins","title","display","text","legend","position","annotation","annotations","avgTemp","type","yMin","yMax","borderWidth","borderDash","enabled","content","toFixed","avgHumidity","avgLight","scales","x","yTemp","suggestedMin","suggestedMax","yHumidity","grid","drawOnChartArea","min","max","yLight","style","height","width","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/xampp/htdocs/IoT/IoT-WebApp/frontend/src/components/SensorChart.jsx"],"sourcesContent":["// src/components/SensorChart.jsx\r\n\r\nimport React, { useMemo } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n} from 'chart.js';\r\nimport annotationPlugin from 'chartjs-plugin-annotation';\r\n\r\n// Đăng ký các thành phần + plugin\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    annotationPlugin\r\n);\r\n\r\nconst SensorChart = ({ sensorData = [] }) => {\r\n\r\n    // Tính toán dữ liệu chart\r\n    const { chartData, averages } = useMemo(() => {\r\n        const dataArray = Array.isArray(sensorData) ? sensorData : [];\r\n\r\n        // Labels = thời gian\r\n        const labels = dataArray.map(item => {\r\n            const date = new Date(item.created_at);\r\n            return date.toLocaleTimeString('vi-VN', {\r\n                hour: '2-digit',\r\n                minute: '2-digit',\r\n                second: '2-digit'\r\n            });\r\n        });\r\n\r\n        // Tách dữ liệu theo sensor\r\n        const temps = dataArray.map(item => item.temperature);\r\n        const hums  = dataArray.map(item => item.humidity);\r\n        const lights = dataArray.map(item => item.light);\r\n\r\n        // Tính trung bình\r\n        const avg = arr => arr.length ? arr.reduce((a,b) => a+b, 0) / arr.length : 0;\r\n\r\n        const averages = {\r\n            temperature: avg(temps),\r\n            humidity: avg(hums),\r\n            light: avg(lights),\r\n        };\r\n\r\n        return {\r\n            chartData: {\r\n                labels,\r\n                datasets: [\r\n                    {\r\n                        label: 'Nhiệt độ (°C)',\r\n                        data: temps,\r\n                        borderColor: 'rgb(255, 99, 132)',\r\n                        backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n                        yAxisID: 'yTemp',\r\n                        tension: 0.3,\r\n                    },\r\n                    {\r\n                        label: 'Độ ẩm (%)',\r\n                        data: hums,\r\n                        borderColor: 'rgb(53, 162, 235)',\r\n                        backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n                        yAxisID: 'yHumidity',\r\n                        tension: 0.3,\r\n                    },\r\n                    {\r\n                        label: 'Ánh sáng (Lux)',\r\n                        data: lights,\r\n                        borderColor: 'rgb(255, 206, 86)',\r\n                        backgroundColor: 'rgba(255, 206, 86, 0.5)',\r\n                        yAxisID: 'yLight',\r\n                        tension: 0.3,\r\n                    },\r\n                ],\r\n            },\r\n            averages\r\n        };\r\n    }, [sensorData]);\r\n\r\n    // Cấu hình Chart\r\n    const options = {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        interaction: {\r\n            mode: 'index',\r\n            intersect: false,\r\n        },\r\n        plugins: {\r\n            title: {\r\n                display: true,\r\n                text: 'Biểu đồ Cảm biến Thời gian thực',\r\n            },\r\n            legend: {\r\n                position: 'top',\r\n            },\r\n            annotation: {\r\n                annotations: {\r\n                    avgTemp: {\r\n                        type: 'line',\r\n                        yMin: averages.temperature,\r\n                        yMax: averages.temperature,\r\n                        borderColor: 'rgb(255, 99, 132)',\r\n                        borderWidth: 1,\r\n                        borderDash: [6, 6],\r\n                        label: {\r\n                            enabled: true,\r\n                            content: `TB: ${averages.temperature.toFixed(1)}°C`,\r\n                            position: 'end'\r\n                        }\r\n                    },\r\n                    avgHumidity: {\r\n                        type: 'line',\r\n                        yMin: averages.humidity,\r\n                        yMax: averages.humidity,\r\n                        borderColor: 'rgb(53, 162, 235)',\r\n                        borderWidth: 1,\r\n                        borderDash: [6, 6],\r\n                        label: {\r\n                            enabled: true,\r\n                            content: `TB: ${averages.humidity.toFixed(1)}%`,\r\n                            position: 'end'\r\n                        }\r\n                    },\r\n                    avgLight: {\r\n                        type: 'line',\r\n                        yMin: averages.light,\r\n                        yMax: averages.light,\r\n                        borderColor: 'rgb(255, 206, 86)',\r\n                        borderWidth: 1,\r\n                        borderDash: [6, 6],\r\n                        label: {\r\n                            enabled: true,\r\n                            content: `TB: ${averages.light.toFixed(1)} Lux`,\r\n                            position: 'end'\r\n                        }\r\n                    },\r\n                }\r\n            }\r\n        },\r\n        scales: {\r\n            x: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Thời gian',\r\n                },\r\n            },\r\n            yTemp: {\r\n                type: 'linear',\r\n                display: true,\r\n                position: 'left',\r\n                title: {\r\n                    display: true,\r\n                    text: 'Nhiệt độ (°C)',\r\n                },\r\n                suggestedMin: 0,\r\n                suggestedMax: 50,\r\n            },\r\n            yHumidity: {\r\n                type: 'linear',\r\n                display: true,\r\n                position: 'right',\r\n                grid: {\r\n                    drawOnChartArea: false,\r\n                },\r\n                title: {\r\n                    display: true,\r\n                    text: 'Độ ẩm (%)',\r\n                },\r\n                min: 0,\r\n                max: 100,\r\n            },\r\n            yLight: {\r\n                type: 'linear',\r\n                display: false,\r\n                position: 'right',\r\n                grid: {\r\n                    drawOnChartArea: false,\r\n                },\r\n                suggestedMin: 0,\r\n                suggestedMax: 2000,\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{ height: '400px', width: '100%' }}>\r\n            <Line options={options} data={chartData} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SensorChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}