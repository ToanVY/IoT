{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\IoT\\\\IoT-WebApp\\\\frontend\\\\src\\\\pages\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\n// src/pages/Dashboard.jsx\n\nimport React, { useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\n// Import Named Export 'getSensorData'\nimport { getSensorData } from '../api';\n\n// === IMPORT CÁC COMPONENTS ===\n// Sửa lỗi: Import component ControlCard và đổi tên nó thành DeviceCard ngay tại đây\nimport DeviceCard from '../components/DeviceCard';\nimport SensorChart from '../components/SensorChart';\nimport SensorCard from '../components/SensorCard';\n\n// === IMPORT CSS VÀ KHỞI TẠO HẰNG SỐ ===\n//import './Dashboard.css'; // Đảm bảo bạn đã tạo file này\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000'); // Khởi tạo Socket.IO Client\n\nconst CONTROLLABLE_DEVICES = [{\n  device: 'light',\n  label: 'Đèn Chiếu Sáng',\n  icon: '💡'\n}, {\n  device: 'fan',\n  label: 'Quạt Thông Gió',\n  icon: '💨'\n},\n// Giả định fan thay vì temp/humid\n{\n  device: 'ac',\n  label: 'Máy Lạnh',\n  icon: '❄️'\n} // Giả định ac\n];\nconst Dashboard = () => {\n  _s();\n  const [latestData, setLatestData] = useState({});\n  const [chartData, setChartData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // 1. Tải dữ liệu lịch sử (API REST)\n    const fetchInitialData = async () => {\n      try {\n        // Tải 30 bản ghi gần nhất\n        const data = await getSensorData(30);\n        // Biểu đồ cần dữ liệu theo thứ tự thời gian tăng dần\n        const sortedData = data.reverse();\n        setChartData(sortedData);\n        if (sortedData.length > 0) {\n          // Dữ liệu mới nhất là bản ghi cuối cùng sau khi đã đảo ngược\n          setLatestData(sortedData[sortedData.length - 1]);\n        }\n      } catch (error) {\n        console.error(\"Lỗi tải dữ liệu Dashboard ban đầu:\", error.message);\n        // Xử lý khi Backend gặp lỗi (ví dụ: lỗi 500 DB)\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // 2. Thiết lập lắng nghe Socket.IO (Real-time)\n    socket.on('connect', () => {\n      console.log('Socket.IO connected to server.');\n    });\n\n    // Lắng nghe sự kiện 'sensorDataUpdate' từ server.js\n    socket.on('sensorDataUpdate', data => {\n      console.log('Real-time data received:', data);\n\n      // Cập nhật dữ liệu mới nhất\n      setLatestData(data);\n\n      // Cập nhật biểu đồ (giữ giới hạn 30 điểm)\n      setChartData(prevChartData => {\n        const updatedData = [...prevChartData, data].slice(-30);\n        return updatedData;\n      });\n    });\n    fetchInitialData();\n\n    // 3. Dọn dẹp: Ngắt lắng nghe khi component unmount\n    return () => {\n      socket.off('connect');\n      socket.off('sensorDataUpdate');\n    };\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-center\",\n    children: \"\\u0110ang t\\u1EA3i Dashboard...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 25\n  }, this);\n\n  // Đảm bảo giá trị hiển thị là số hoặc '--'\n  const temp = latestData.temperature || '--';\n  const light = latestData.light || '--';\n  const humidity = latestData.humidity || '--';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sensor-summary-cards\",\n      children: [/*#__PURE__*/_jsxDEV(SensorCard, {\n        title: \"Nhi\\u1EC7t \\u0111\\u1ED9\",\n        value: temp,\n        unit: \"\\xB0C\",\n        icon: \"\\uD83C\\uDF21\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SensorCard, {\n        title: \"\\u0110\\u1ED9 \\u1EA9m\",\n        value: humidity,\n        unit: \"%\",\n        icon: \"\\uD83D\\uDCA7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SensorCard, {\n        title: \"\\xC1nh s\\xE1ng\",\n        value: light,\n        unit: \"Lux\",\n        icon: \"\\uD83D\\uDCA1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-chart-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-panel card\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"panel-title\",\n          children: \"\\u0110i\\u1EC1u khi\\u1EC3n Thi\\u1EBFt b\\u1ECB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-list\",\n          children: CONTROLLABLE_DEVICES.map(item => /*#__PURE__*/_jsxDEV(DeviceCard, {\n            device: item.device,\n            label: item.label,\n            mockupIcon: item.icon\n          }, item.device, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-panel card\",\n        children: /*#__PURE__*/_jsxDEV(SensorChart, {\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this);\n};\n_s(Dashboard, \"XKwz9IucV5aTo1ZfgEeBlw8SRPM=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","io","getSensorData","DeviceCard","SensorChart","SensorCard","jsxDEV","_jsxDEV","socket","CONTROLLABLE_DEVICES","device","label","icon","Dashboard","_s","latestData","setLatestData","chartData","setChartData","loading","setLoading","fetchInitialData","data","sortedData","reverse","length","error","console","message","on","log","prevChartData","updatedData","slice","off","className","children","fileName","_jsxFileName","lineNumber","columnNumber","temp","temperature","light","humidity","title","value","unit","map","item","mockupIcon","_c","$RefreshReg$"],"sources":["D:/xampp/htdocs/IoT/IoT-WebApp/frontend/src/pages/Dashboard.jsx"],"sourcesContent":["// src/pages/Dashboard.jsx\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { io } from 'socket.io-client';\r\n// Import Named Export 'getSensorData'\r\nimport { getSensorData } from '../api'; \r\n\r\n// === IMPORT CÁC COMPONENTS ===\r\n// Sửa lỗi: Import component ControlCard và đổi tên nó thành DeviceCard ngay tại đây\r\nimport DeviceCard from '../components/DeviceCard'; \r\nimport SensorChart from '../components/SensorChart';\r\nimport SensorCard from '../components/SensorCard';\r\n\r\n// === IMPORT CSS VÀ KHỞI TẠO HẰNG SỐ ===\r\n//import './Dashboard.css'; // Đảm bảo bạn đã tạo file này\r\nconst socket = io('http://localhost:5000'); // Khởi tạo Socket.IO Client\r\n\r\nconst CONTROLLABLE_DEVICES = [\r\n    { device: 'light', label: 'Đèn Chiếu Sáng', icon: '💡' },\r\n    { device: 'fan', label: 'Quạt Thông Gió', icon: '💨' }, // Giả định fan thay vì temp/humid\r\n    { device: 'ac', label: 'Máy Lạnh', icon: '❄️' }, // Giả định ac\r\n];\r\n\r\nconst Dashboard = () => {\r\n    const [latestData, setLatestData] = useState({});\r\n    const [chartData, setChartData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        \r\n        // 1. Tải dữ liệu lịch sử (API REST)\r\n        const fetchInitialData = async () => {\r\n            try {\r\n                // Tải 30 bản ghi gần nhất\r\n                const data = await getSensorData(30); \r\n                // Biểu đồ cần dữ liệu theo thứ tự thời gian tăng dần\r\n                const sortedData = data.reverse(); \r\n                \r\n                setChartData(sortedData); \r\n                if (sortedData.length > 0) {\r\n                    // Dữ liệu mới nhất là bản ghi cuối cùng sau khi đã đảo ngược\r\n                    setLatestData(sortedData[sortedData.length - 1]); \r\n                }\r\n            } catch (error) {\r\n                console.error(\"Lỗi tải dữ liệu Dashboard ban đầu:\", error.message);\r\n                // Xử lý khi Backend gặp lỗi (ví dụ: lỗi 500 DB)\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        // 2. Thiết lập lắng nghe Socket.IO (Real-time)\r\n        socket.on('connect', () => {\r\n            console.log('Socket.IO connected to server.');\r\n        });\r\n        \r\n        // Lắng nghe sự kiện 'sensorDataUpdate' từ server.js\r\n        socket.on('sensorDataUpdate', (data) => {\r\n            console.log('Real-time data received:', data);\r\n            \r\n            // Cập nhật dữ liệu mới nhất\r\n            setLatestData(data);\r\n            \r\n            // Cập nhật biểu đồ (giữ giới hạn 30 điểm)\r\n            setChartData(prevChartData => {\r\n                const updatedData = [...prevChartData, data].slice(-30); \r\n                return updatedData;\r\n            });\r\n        });\r\n\r\n        fetchInitialData();\r\n\r\n        // 3. Dọn dẹp: Ngắt lắng nghe khi component unmount\r\n        return () => {\r\n            socket.off('connect');\r\n            socket.off('sensorDataUpdate');\r\n        };\r\n    }, []); \r\n\r\n    if (loading) return <div className=\"loading-center\">Đang tải Dashboard...</div>;\r\n    \r\n    // Đảm bảo giá trị hiển thị là số hoặc '--'\r\n    const temp = latestData.temperature || '--';\r\n    const light = latestData.light || '--';\r\n    const humidity = latestData.humidity || '--';\r\n\r\n    return (\r\n        <div className=\"dashboard-container\">\r\n            {/* Hàng 1: Thẻ Cảm biến */}\r\n            <div className=\"sensor-summary-cards\">\r\n                <SensorCard title=\"Nhiệt độ\" value={temp} unit=\"°C\" icon=\"🌡️\" />\r\n                <SensorCard title=\"Độ ẩm\" value={humidity} unit=\"%\" icon=\"💧\" />\r\n                <SensorCard title=\"Ánh sáng\" value={light} unit=\"Lux\" icon=\"💡\" />\r\n            </div>\r\n\r\n            {/* Hàng 2: Điều khiển và Biểu đồ */}\r\n            <div className=\"control-chart-area\">\r\n                \r\n                {/* Cột 1: Điều khiển */}\r\n                <div className=\"control-panel card\">\r\n                    <p className=\"panel-title\">Điều khiển Thiết bị</p>\r\n                    <div className=\"control-list\">\r\n                        {CONTROLLABLE_DEVICES.map(item => (\r\n                            <DeviceCard \r\n                                key={item.device} \r\n                                device={item.device} \r\n                                label={item.label} \r\n                                mockupIcon={item.icon} \r\n                            />\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Cột 2: Biểu đồ */}\r\n                <div className=\"chart-panel card\">\r\n                    <SensorChart data={chartData} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,EAAE,QAAQ,kBAAkB;AACrC;AACA,SAASC,aAAa,QAAQ,QAAQ;;AAEtC;AACA;AACA,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,WAAW,MAAM,2BAA2B;AACnD,OAAOC,UAAU,MAAM,0BAA0B;;AAEjD;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAGP,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;;AAE5C,MAAMQ,oBAAoB,GAAG,CACzB;EAAEC,MAAM,EAAE,OAAO;EAAEC,KAAK,EAAE,gBAAgB;EAAEC,IAAI,EAAE;AAAK,CAAC,EACxD;EAAEF,MAAM,EAAE,KAAK;EAAEC,KAAK,EAAE,gBAAgB;EAAEC,IAAI,EAAE;AAAK,CAAC;AAAE;AACxD;EAAEF,MAAM,EAAE,IAAI;EAAEC,KAAK,EAAE,UAAU;EAAEC,IAAI,EAAE;AAAK,CAAC,CAAE;AAAA,CACpD;AAED,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IAEZ;IACA,MAAMsB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACA;QACA,MAAMC,IAAI,GAAG,MAAMpB,aAAa,CAAC,EAAE,CAAC;QACpC;QACA,MAAMqB,UAAU,GAAGD,IAAI,CAACE,OAAO,CAAC,CAAC;QAEjCN,YAAY,CAACK,UAAU,CAAC;QACxB,IAAIA,UAAU,CAACE,MAAM,GAAG,CAAC,EAAE;UACvB;UACAT,aAAa,CAACO,UAAU,CAACA,UAAU,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC;QACpD;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAACE,OAAO,CAAC;QAClE;MACJ,CAAC,SAAS;QACNR,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;;IAED;IACAZ,MAAM,CAACqB,EAAE,CAAC,SAAS,EAAE,MAAM;MACvBF,OAAO,CAACG,GAAG,CAAC,gCAAgC,CAAC;IACjD,CAAC,CAAC;;IAEF;IACAtB,MAAM,CAACqB,EAAE,CAAC,kBAAkB,EAAGP,IAAI,IAAK;MACpCK,OAAO,CAACG,GAAG,CAAC,0BAA0B,EAAER,IAAI,CAAC;;MAE7C;MACAN,aAAa,CAACM,IAAI,CAAC;;MAEnB;MACAJ,YAAY,CAACa,aAAa,IAAI;QAC1B,MAAMC,WAAW,GAAG,CAAC,GAAGD,aAAa,EAAET,IAAI,CAAC,CAACW,KAAK,CAAC,CAAC,EAAE,CAAC;QACvD,OAAOD,WAAW;MACtB,CAAC,CAAC;IACN,CAAC,CAAC;IAEFX,gBAAgB,CAAC,CAAC;;IAElB;IACA,OAAO,MAAM;MACTb,MAAM,CAAC0B,GAAG,CAAC,SAAS,CAAC;MACrB1B,MAAM,CAAC0B,GAAG,CAAC,kBAAkB,CAAC;IAClC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIf,OAAO,EAAE,oBAAOZ,OAAA;IAAK4B,SAAS,EAAC,gBAAgB;IAAAC,QAAA,EAAC;EAAqB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;;EAE/E;EACA,MAAMC,IAAI,GAAG1B,UAAU,CAAC2B,WAAW,IAAI,IAAI;EAC3C,MAAMC,KAAK,GAAG5B,UAAU,CAAC4B,KAAK,IAAI,IAAI;EACtC,MAAMC,QAAQ,GAAG7B,UAAU,CAAC6B,QAAQ,IAAI,IAAI;EAE5C,oBACIrC,OAAA;IAAK4B,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAEhC7B,OAAA;MAAK4B,SAAS,EAAC,sBAAsB;MAAAC,QAAA,gBACjC7B,OAAA,CAACF,UAAU;QAACwC,KAAK,EAAC,yBAAU;QAACC,KAAK,EAAEL,IAAK;QAACM,IAAI,EAAC,OAAI;QAACnC,IAAI,EAAC;MAAK;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACjEjC,OAAA,CAACF,UAAU;QAACwC,KAAK,EAAC,sBAAO;QAACC,KAAK,EAAEF,QAAS;QAACG,IAAI,EAAC,GAAG;QAACnC,IAAI,EAAC;MAAI;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAChEjC,OAAA,CAACF,UAAU;QAACwC,KAAK,EAAC,gBAAU;QAACC,KAAK,EAAEH,KAAM;QAACI,IAAI,EAAC,KAAK;QAACnC,IAAI,EAAC;MAAI;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjE,CAAC,eAGNjC,OAAA;MAAK4B,SAAS,EAAC,oBAAoB;MAAAC,QAAA,gBAG/B7B,OAAA;QAAK4B,SAAS,EAAC,oBAAoB;QAAAC,QAAA,gBAC/B7B,OAAA;UAAG4B,SAAS,EAAC,aAAa;UAAAC,QAAA,EAAC;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,eAClDjC,OAAA;UAAK4B,SAAS,EAAC,cAAc;UAAAC,QAAA,EACxB3B,oBAAoB,CAACuC,GAAG,CAACC,IAAI,iBAC1B1C,OAAA,CAACJ,UAAU;YAEPO,MAAM,EAAEuC,IAAI,CAACvC,MAAO;YACpBC,KAAK,EAAEsC,IAAI,CAACtC,KAAM;YAClBuC,UAAU,EAAED,IAAI,CAACrC;UAAK,GAHjBqC,IAAI,CAACvC,MAAM;YAAA2B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAInB,CACJ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eAGNjC,OAAA;QAAK4B,SAAS,EAAC,kBAAkB;QAAAC,QAAA,eAC7B7B,OAAA,CAACH,WAAW;UAACkB,IAAI,EAAEL;QAAU;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC1B,EAAA,CAjGID,SAAS;AAAAsC,EAAA,GAATtC,SAAS;AAmGf,eAAeA,SAAS;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}