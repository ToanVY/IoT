{"ast":null,"code":"var _jsxFileName = \"D:\\\\xampp\\\\htdocs\\\\IoT\\\\IoT-WebApp\\\\frontend\\\\src\\\\components\\\\DeviceCard.jsx\",\n  _s = $RefreshSig$();\n// src/components/DeviceCard.jsx\nimport React, { useState } from 'react';\nimport { controlDevice } from '../api';\n// import './DeviceCard.css'; // File CSS cần thiết để tạo kiểu switch\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeviceCard = ({\n  device,\n  label,\n  mockupIcon,\n  initialStatus = 'OFF'\n}) => {\n  _s();\n  // Giả định trạng thái ban đầu là OFF cho mục đích hiển thị mẫu\n  const [status, setStatus] = useState(initialStatus);\n  const [loading, setLoading] = useState(false);\n  const handleToggle = async () => {\n    if (loading) return;\n    const newStatus = status === 'ON' ? 'OFF' : 'ON';\n    setLoading(true);\n    try {\n      // Gọi API backend (POST /api/devices/:device)\n      await controlDevice(device, newStatus);\n      setStatus(newStatus); // Cập nhật UI nếu thành công\n    } catch (error) {\n      console.error(`Lỗi điều khiển ${label}:`, error);\n      // Xử lý lỗi nếu cần\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"device-control-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"label-icon-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `icon ${status.toLowerCase()}`,\n        children: mockupIcon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"label-text\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"device-label\",\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"status-text\",\n          children: status.toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `toggle-switch ${status.toLowerCase()}`,\n      onClick: handleToggle,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `slider ${status.toLowerCase()}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(DeviceCard, \"LnrwUJwjTq8NBmaoDZ4WKk20kfs=\");\n_c = DeviceCard;\nexport default DeviceCard;\nvar _c;\n$RefreshReg$(_c, \"DeviceCard\");","map":{"version":3,"names":["React","useState","controlDevice","jsxDEV","_jsxDEV","DeviceCard","device","label","mockupIcon","initialStatus","_s","status","setStatus","loading","setLoading","handleToggle","newStatus","error","console","className","children","toLowerCase","fileName","_jsxFileName","lineNumber","columnNumber","toUpperCase","onClick","_c","$RefreshReg$"],"sources":["D:/xampp/htdocs/IoT/IoT-WebApp/frontend/src/components/DeviceCard.jsx"],"sourcesContent":["// src/components/DeviceCard.jsx\r\nimport React, { useState } from 'react';\r\nimport { controlDevice } from '../api';\r\n// import './DeviceCard.css'; // File CSS cần thiết để tạo kiểu switch\r\n\r\nconst DeviceCard = ({ device, label, mockupIcon, initialStatus = 'OFF' }) => {\r\n    // Giả định trạng thái ban đầu là OFF cho mục đích hiển thị mẫu\r\n    const [status, setStatus] = useState(initialStatus); \r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleToggle = async () => {\r\n        if (loading) return; \r\n\r\n        const newStatus = status === 'ON' ? 'OFF' : 'ON';\r\n        \r\n        setLoading(true);\r\n        try {\r\n            // Gọi API backend (POST /api/devices/:device)\r\n            await controlDevice(device, newStatus); \r\n            setStatus(newStatus); // Cập nhật UI nếu thành công\r\n        } catch (error) {\r\n            console.error(`Lỗi điều khiển ${label}:`, error);\r\n            // Xử lý lỗi nếu cần\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"device-control-item\">\r\n            <div className=\"label-icon-group\">\r\n                <div className={`icon ${status.toLowerCase()}`}>{mockupIcon}</div>\r\n                <div className=\"label-text\">\r\n                    <p className=\"device-label\">{label}</p>\r\n                    {/* Trạng thái được bật/tắt hiển thị trong mockup */}\r\n                    <span className=\"status-text\">{status.toUpperCase()}</span> \r\n                </div>\r\n            </div>\r\n            \r\n            {/* Switch Toggle - Replicating the visual from the mockup */}\r\n            <div \r\n                className={`toggle-switch ${status.toLowerCase()}`} \r\n                onClick={handleToggle}\r\n            >\r\n                <div className={`slider ${status.toLowerCase()}`}></div>\r\n                {loading && <div className=\"loading-overlay\"></div>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DeviceCard;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,aAAa,QAAQ,QAAQ;AACtC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,UAAU,GAAGA,CAAC;EAAEC,MAAM;EAAEC,KAAK;EAAEC,UAAU;EAAEC,aAAa,GAAG;AAAM,CAAC,KAAK;EAAAC,EAAA;EACzE;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAACQ,aAAa,CAAC;EACnD,MAAM,CAACI,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMc,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAIF,OAAO,EAAE;IAEb,MAAMG,SAAS,GAAGL,MAAM,KAAK,IAAI,GAAG,KAAK,GAAG,IAAI;IAEhDG,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACA;MACA,MAAMZ,aAAa,CAACI,MAAM,EAAEU,SAAS,CAAC;MACtCJ,SAAS,CAACI,SAAS,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,kBAAkBV,KAAK,GAAG,EAAEU,KAAK,CAAC;MAChD;IACJ,CAAC,SAAS;MACNH,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,oBACIV,OAAA;IAAKe,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAChChB,OAAA;MAAKe,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC7BhB,OAAA;QAAKe,SAAS,EAAE,QAAQR,MAAM,CAACU,WAAW,CAAC,CAAC,EAAG;QAAAD,QAAA,EAAEZ;MAAU;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAClErB,OAAA;QAAKe,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvBhB,OAAA;UAAGe,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAEb;QAAK;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAEvCrB,OAAA;UAAMe,SAAS,EAAC,aAAa;UAAAC,QAAA,EAAET,MAAM,CAACe,WAAW,CAAC;QAAC;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1D,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAGNrB,OAAA;MACIe,SAAS,EAAE,iBAAiBR,MAAM,CAACU,WAAW,CAAC,CAAC,EAAG;MACnDM,OAAO,EAAEZ,YAAa;MAAAK,QAAA,gBAEtBhB,OAAA;QAAKe,SAAS,EAAE,UAAUR,MAAM,CAACU,WAAW,CAAC,CAAC;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EACvDZ,OAAO,iBAAIT,OAAA;QAAKe,SAAS,EAAC;MAAiB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACf,EAAA,CA5CIL,UAAU;AAAAuB,EAAA,GAAVvB,UAAU;AA8ChB,eAAeA,UAAU;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}